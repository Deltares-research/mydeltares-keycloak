plugins {
    id 'java'
}

group = 'nl.deltares'
version = '3.0'

repositories {
    mavenCentral()
}


configurations {
    extraLibs
}

dependencies {

    implementation('jakarta.ws.rs:jakarta.ws.rs-api:3.1.0')
    implementation('org.apache.commons:commons-text:1.10.0')
    implementation('org.freemarker:freemarker:2.3.32')
    implementation('org.keycloak:keycloak-server-spi:' + keycloakVersion)
    implementation('org.keycloak:keycloak-server-spi-private:' + keycloakVersion)
    implementation('org.keycloak:keycloak-services:' + keycloakVersion)
    implementation('org.keycloak:keycloak-core:' + keycloakVersion)
    implementation('org.keycloak:keycloak-model-jpa:' + keycloakVersion)
    implementation('org.keycloak:keycloak-saml-core:' + keycloakVersion)
    implementation('org.keycloak:keycloak-saml-core-public:' + keycloakVersion)
//    testImplementation('org.junit:junit-bom:5.10.0-RC2')
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.1')
    implementation platform('org.testcontainers:testcontainers-bom:1.19.3') //import bom
    testImplementation('org.testcontainers:mysql') //no version specified
    testImplementation('org.junit.platform:junit-platform-suite-engine')


    extraLibs('org.apache.commons:commons-text:1.10.0')
}

test {
    useJUnitPlatform()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) } }
}

tasks.register('copyJarsToDocker', Copy) {
    copy {
        from('build/libs/')
        into( 'src/test/resources/docker/keycloak/providers/')
    }
    copy {
        from('build/libs/')
        into( '../docker/keycloak/providers/')
    }
}

build {
    finalizedBy( 'copyJarsToDocker')
}