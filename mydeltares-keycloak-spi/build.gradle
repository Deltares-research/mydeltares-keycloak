plugins {
    id 'java'
    id 'maven-publish'
}

group = 'nl.deltares'
version = '3.0.5'

repositories {
    mavenCentral()
}

publishing {

    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.properties['group']
            artifactId = project.name
            version = project.properties['version']
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/Deltares-research/mydeltares-keycloak"
            credentials {
                username = GITHUB_ACTOR
                password = GITHUB_TOKEN
            }
        }
    }
}

configurations {
    extraLibs
}

dependencies {

    implementation('org.apache.commons:commons-text:1.10.0')
    implementation('org.apache.commons:commons-compress:[1.26.0,)')
    implementation('org.freemarker:freemarker:2.3.32')
    implementation('org.eclipse.parsson:parsson:[1.1.3,)')

    implementation('org.keycloak:keycloak-server-spi:' + keycloakVersion)
    implementation('org.keycloak:keycloak-server-spi-private:' + keycloakVersion)
    implementation('org.keycloak:keycloak-services:' + keycloakVersion)
    implementation('org.keycloak:keycloak-core:[24.0.7,)')
    implementation('org.keycloak:keycloak-model-jpa:' + keycloakVersion)
    implementation('org.keycloak:keycloak-saml-core:[24.0.8,)')
    implementation('org.keycloak:keycloak-saml-core-public:' + keycloakVersion)

    implementation('com.google.guava:guava:[32.0.0-android,)')
    implementation('io.netty:netty-codec-http:[4.1.108.Final,)')
    implementation('io.netty:netty-handler:[4.1.118.Final,)')
    implementation('io.netty:netty-common:[4.1.115.Final,)')
    implementation('io.vertx:vertx-core:[4.4.8,)')
    implementation('io.quarkus:quarkus-rest:[3.2.12.Final,)')
    implementation('io.quarkus:quarkus-core:[3.2.12.Final,)')
    implementation('io.quarkus:quarkus-resteasy-reactive:[3.2.11.Final,)')
    implementation('io.quarkus:quarkus-resteasy-reactive-common:[3.2.10.Final,)')

    testImplementation('org.apache.httpcomponents:httpclient:4.5.14')
    testImplementation('org.apache.httpcomponents:httpmime:4.5.14')

    testImplementation('org.junit.jupiter:junit-jupiter:5.9.1')
    implementation platform('org.testcontainers:testcontainers-bom:1.19.1') //import bom
    testImplementation('org.testcontainers:mysql') //no version specified
    testImplementation('org.junit.platform:junit-platform-suite-engine')


    extraLibs('org.apache.commons:commons-text:1.10.0')
}

test {
//    filter {
//        excludeTestsMatching('nl.deltares.keycloak.storage.rest.*')
//        include('nl.deltares.**')
//    }
    useJUnitPlatform()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) } }
}

tasks.register('copyJarsToDocker', Task) {

    println('Deleting old spi jar from main docker')
    delete fileTree(liferayDockerPath + '/keycloak/providers/'){
        include '**/mydeltares-keycloak-*.jar'
    }

    println('Deleting old spi jar from test docker')
    delete fileTree(testDockerPath + '/keycloak/providers/'){
        include '**/mydeltares-keycloak-*.jar'
    }

    copy {
        println('Copying spi jar to main docker')
        from('build/libs/')
        into(liferayDockerPath + '/keycloak/providers/')
    }
    copy {
        println('Copying spi jar to test docker')
        from('build/libs/')
        into(testDockerPath + '/keycloak/providers/')
    }
}

jar {
    println('Configuring build step')
    doLast {
        println('Running last step: copyJarsToDocker')
        copyJarsToDocker
    }
}